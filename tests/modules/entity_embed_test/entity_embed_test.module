<?php

/**
 * @file
 * Helper module for the Entity Embed tests.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\entity_embed\EntityEmbedDisplay\EntityEmbedDisplayInterface;

/**
 * Implements hook_entity_embed_context_alter().
 */
function entity_embed_test_entity_embed_context_alter(array &$context, &$callback, EntityInterface $entity) {
  // Allow tests to enable or disable this hook.
  if (!\Drupal::state()->get('entity_embed_test_entity_embed_context_alter', FALSE)) {
    return;
  }

  // Force to use 'Label' plugin.
  $context['data-entity-embed-display'] = 'entity_reference:entity_reference_label';
  $context['data-entity-embed-settings'] = array('link' => 1);
}

/**
 * Implements hook_entity_embed_display_plugins_alter().
 */
function entity_embed_test_entity_embed_display_plugins_alter(&$info) {
  // Allow tests to enable or disable this hook.
  if (!\Drupal::state()->get('entity_embed_test_entity_embed_display_plugins_alter', FALSE)) {
    return;
  }

  // Prefix each plugin name with 'testing_hook:'.
  $new_info = array();
  foreach ($info as $key => $value) {
    $new_key = "testing_hook:" . $key;
    $new_info[$new_key] = $info[$key];
    unset($info[$key]);
  }
  $info = $new_info;
}

/**
 * Implements hook_entity_preembed().
 */
function entity_embed_test_entity_preembed(EntityInterface $entity, array $context) {
  // Allow tests to enable or disable this hook.
  if (!\Drupal::state()->get('entity_embed_test_entity_preembed', FALSE)) {
    return;
  }

  // Set title of the entity.
  $entity->setTitle("Title set by hook_entity_preembed");
}

/**
 * Implements hook_entity_embed_alter().
 */
function entity_embed_test_entity_embed_alter(array &$build, EntityEmbedDisplayInterface $display) {
  // Allow tests to enable or disable this hook.
  if (!\Drupal::state()->get('entity_embed_test_entity_embed_alter', FALSE)) {
    return;
  }

  // Set title of the 'node' entity.
  $node = $build['#node'];
  $node->setTitle("Title set by hook_entity_embed_alter");
}
